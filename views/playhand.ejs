<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
</style>
<title>Hand Simulation</title>
<link rel="apple-touch-icon" sizes="180x180" href="/assets/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/assets/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/assets/favicon-16x16.png">
<link rel="manifest" href="/assets/site.webmanifest">
<script type="module">
    // Import necessary functions
    import { startSimulateHandDraw, startDrawOneCard, startLibrarySearch, startLibraryDrawAll, viewEntireLibrary, cardNames, cardInfo } from "./scripts/playhand.mjs";

    // Attach event listeners to buttons when the DOM is ready
    document.addEventListener("DOMContentLoaded", () => {
        const DrawACard = document.getElementById("DrawACard");
        DrawACard.addEventListener("click", () => {
            console.log("Draw A Card clicked");
            startDrawOneCard(cardNames, cardInfo);
        });
        // JavaScript to open the library popup when a button in the group is clicked
        const libraryPopup = document.getElementById("libraryPopup");


        const ViewLibrary = document.getElementById("ViewLibrary");
        ViewLibrary.addEventListener("click", () => {
            // Clear the content by removing all child nodes
            while (libraryPopup.firstChild) {
                libraryPopup.removeChild(libraryPopup.firstChild);
            }
            // Create the "Close Library" button element
            const closeLibraryPopupButton = document.createElement("button");
            closeLibraryPopupButton.id = "closeLibraryPopup";
            closeLibraryPopupButton.textContent = "Close";

            // Append the button to the libraryPopup
            libraryPopup.appendChild(closeLibraryPopupButton);
            console.log("Look at the entire library clicked");
            viewEntireLibrary();
        });


        // JavaScript to close the library popup
        document.addEventListener("click", (event) => {
            if (event.target.id === "closeLibraryPopup") {
                // Clear the content by removing all child nodes
                libraryPopup.innerHTML = '';
                libraryPopup.style.display = "none"; // Hide the popup
            }
        });

        // Get all tab buttons and content sections within the left-sidebar
        const tabButtons = document.querySelectorAll('#left-sidebar .tab-button');
        const tabContents = document.querySelectorAll('#left-sidebar .tab-content');

        // Add event listeners to the tab buttons
        tabButtons.forEach((button) => {
            button.addEventListener('click', () => {
                // Remove the 'active' class from all tab buttons
                tabButtons.forEach((btn) => {
                    btn.classList.remove('active');
                });

                // Hide all tab content sections
                tabContents.forEach((content) => {
                    content.style.display = 'none';
                });

                // Get the data-tab attribute from the clicked button
                const tabId = button.getAttribute('data-tab');

                // Add the 'active' class to the clicked button
                button.classList.add('active');

                // Display the corresponding content section
                console.log("tabId: " + tabId + " clicked");
                const selectedTab = document.getElementById(tabId);
                selectedTab.style.display = 'flex';
            });
        });

        // Get a reference to the dropdown menu
        const cardTypeMenu = document.getElementById('cardTypeMenu');

        // Add an event listener to the dropdown menu
        cardTypeMenu.addEventListener('change', function () {
            const selectedOption = cardTypeMenu.value;

            // Clear the content by removing all child nodes
            while (libraryPopup.firstChild) {
                libraryPopup.removeChild(libraryPopup.firstChild);
            }

            // Create the "Close Library" button element
            const closeLibraryPopupButton = document.createElement("button");
            closeLibraryPopupButton.id = "closeLibraryPopup";
            closeLibraryPopupButton.textContent = "Close";

            // Append the button to the libraryPopup
            libraryPopup.appendChild(closeLibraryPopupButton);

            if (selectedOption === "All") {
                // Call the second function when "All" is selected
                viewEntireLibrary();
            } else {
                // Call startLibrarySearch with the selected card type
                startLibrarySearch(selectedOption);
            }
        });


        const DrawHandButton = document.getElementById("DrawHandButton");
        DrawHandButton.addEventListener("click", () => {
            startSimulateHandDraw();
        });

        // Call the main function to set up the initial state
        startSimulateHandDraw();
    });

</script>


<link rel="stylesheet" href="/assets/decks.css">
</head>
<div id="header">
    <%- include('partials/nav'); -%>
</div>
<body>
<div id="container">
    <div id="left-sidebar">
        <section id="deck" class="decklist">
            <%- include('partials/decklist'); -%>
        </section>
       <section id="section_hand">
            <div class="library-controls">
                <h3><button id="DrawHandButton" type="button" value="Start" class="button">Draw Hand</button>
                <button  id="DrawACard" type="button" class="button" >Draw</button>
                <button type="button" class="button" id="ViewLibrary">Library</button>
                <select id="cardTypeMenu" class="button custom-dropdown">
                    <option value="">--Search Library--</option>
                    <option value="All">All</option>
                    <option value="Spells">Instants & Sorceries</option>
                    <option value="Creatures">Creatures</option>
                    <option value="Planeswalkers">Planeswalkers</option>
                    <option value="Artifacts">Artifacts</option>
                    <option value="Enchantments">Enchantments</option>
                    <option value="Land">Land</option>
                </select>
                <p class="deckSize flexlibrary" id="deckSize">(0)</p>
             </h3>
            </div>  
            <div class="hand-container">
                <section id="section_lands" class="flex"></section>
                <section id="section_spells" class="flex"></section>
            </div>
        </section>
        <div class="tab-container">
            <button class="tab-button active" data-tab="section_graveyard">
                <img src="/assets/wallpaper/graveyard_as_icon.png" alt="Graveyard Image"> Graveyard
              </button>
            <button class="tab-button" data-tab="section_exile">
                <img src="/assets/wallpaper/planeswalker_button_small.png" alt="Graveyard Image"> Exile
            </button>
        </div>
        <div class="exile-graveyard-container">
            <section id="section_graveyard" class="tab-content graveyard" style="display:flex;">
            <!-- Content for Graveyard Tab -->
            </section>
            <section id="section_exile" class="tab-content ">
            <!-- Content for Exile Tab -->
            </section>
        </div>
    </div>
    <div id="middle-content">
        <div><h3>BattleField</h3></div>
        <section id="section_battlefield" class="flex">
               <div class="battlefield-container">
                <section id="section_battlefield-lands" class="flex"></section>
                <section id="section_battlefield-creatures" class="flex"></section>
                <section id="section_battlefield-spells" class="flex"></section>
                <section id="section_battlefield-permananents" class="flex"></section>
            </div>
        </section>
    </div>
    <div id="right-sidebar">
        <div id="libraryPopup" style="display: none;">
            <button id="closeLibraryPopup">Close</button>
        </div>
    </div>
</div>
</body>
</html>
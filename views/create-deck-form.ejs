<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<style type="text/css">
</style>
<title>Build Deck</title>
<link rel="apple-touch-icon" sizes="180x180" href="/assets/apple-touch-icon.png">
<link rel="icon" type="image/png" sizes="32x32" href="/assets/favicon-32x32.png">
<link rel="icon" type="image/png" sizes="16x16" href="/assets/favicon-16x16.png">
<link rel="manifest" href="/assets/site.webmanifest">
<script type="module">
  import { convertToXml, loadFromXml, deleteCardInDeck } from "./scripts/decks.mjs";
  import { getCardDetails, fetchCardInformation, displaySuggestions, createCardInputFields  } from "./scripts/config.mjs";
  
  document.addEventListener("DOMContentLoaded", () => {
     const cardInputsContainer = document.getElementById("cardInputsContainer");
    let cardCount = 0;
    const suggestionsContainer = document.getElementById("suggestionsContainer");

    // Add an event listener for card name input
    document.addEventListener("input", (event) => {
      const input = event.target;
      if (input.type === "text" && input.name && input.name.startsWith("cardName")) {
        const match = input.name.match(/\d+/);
        if (match) {
          const index = parseInt(match[0], 10);
          fetchCardInformation(index, input.value);
        }
      }
  });

    // "Save Deck" Button
    const saveDeckButton = document.getElementById("saveDeckButton");
    saveDeckButton.addEventListener("click", () => {
      // Create an object to store the deck data
      const deckData = {
        deckName: document.querySelector("input[name='deckName']").value,
        cards: [],
      };

      // Collect card data from input fields
      for (let i = 1; i <= cardCount; i++) {
        deckData.cards.push({
          name: document.querySelector(`input[name='cardName${i}']`).value,
          quantity: document.querySelector(`input[name='cardQuantity${i}']`).value,
          type: document.querySelector(`input[name='cardType${i}']`).value,
          cost: document.querySelector(`input[name='cardCost${i}']`).value,
          rulesText: document.querySelector(`input[name='cardRulesText${i}']`).value,
        });
      }

      // Convert deckData to XML (you may need to use an XML library)
      const xmlString = convertToXml(deckData); // Implement this function

      // Create a Blob with the XML data
      const blob = new Blob([xmlString], { type: "text/xml" });

      // Create a download link
      const a = document.createElement("a");
      a.href = URL.createObjectURL(blob);
      a.download = `${deckData.deckName}.xml`;

      // Trigger a click event to start the download
      a.click();
    });

// "Upload and Load XML File" Event Listener
const xmlFileInput = document.getElementById("xmlFile");
xmlFileInput.addEventListener("change", async (event) => {
  const file = event.target.files[0];
  if (file) {
    const reader = new FileReader();

    reader.onload = async (e) => {
      const xmlText = e.target.result;
      const parser = new DOMParser();
      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');

      // Extract and populate the form fields with XML data here
      const deckName = xmlDoc.querySelector("Decklist").getAttribute("Deck");
      document.querySelector("input[name='deckName']").value = deckName;

      const cardElements = xmlDoc.querySelectorAll("Card");

      // Clear the cardInputsContainer before populating it
      cardInputsContainer.innerHTML = '';

      cardCount = 0; // Reset card count

// Iterate through card elements and create card input fields
for (const card of cardElements) {
  const name = card.querySelector("Name").textContent;
  const quantity = card.querySelector("Quantity").textContent;
  const type = card.querySelector("Type").textContent;
  const cost = card.querySelector("Cost").textContent;

  cardCount++; // Increment the card count
  createCardInputFields(cardCount, name, quantity, type, cost);

  // Check if the XML contains rules text for a card
  if (card.querySelector("RulesText")) {
    // The XML contains rules text for this card
    const rulesText = card.querySelector("RulesText").textContent;
    // Update the input field for rules text
    document.querySelector(`input[name='cardRulesText${cardCount}']`).value = rulesText;

    // Update the input fields for type and cost from the API
    const cardName = name;

    // Fetch card details (type and cost) based on the card name
    const cardDetails = await getCardDetails(cardName);

    // Update the input fields with the fetched data
    document.querySelector(`input[name='cardType${cardCount}']`).value = cardDetails.cardType;
    document.querySelector(`input[name='cardCost${cardCount}']`).value = cardDetails.cardCost;
  } else {
    // The XML does not contain rules text, so fetch it from the API
    const cardName = name;

    // Fetch the rules text and other details from the API using a function like getCardDetails
    const cardDetails = await getCardDetails(cardName);

    // Update the input fields with the fetched data
    document.querySelector(`input[name='cardType${cardCount}']`).value = cardDetails.cardType;
    document.querySelector(`input[name='cardCost${cardCount}']`).value = cardDetails.cardCost;
    document.querySelector(`input[name='cardRulesText${cardCount}']`).value = cardDetails.rulesText;
  }
}
    };

    reader.readAsText(file);
  }
});

    // In your code, create an input field for card name suggestions
    const cardNameInput = document.getElementById("lookupCardName");


  // Add an event listener to the card name input for suggestions
  cardNameInput.addEventListener("input", async (event) => {
    const input = event.target;
    const inputName = input.value.trim();

    if (inputName.length < 3) {
      // Avoid making API requests for very short inputs
      return;
    }

    // Make a request to the Scryfall API for card name suggestions
    const apiUrl = `https://api.scryfall.com/cards/autocomplete?q=${encodeURIComponent(inputName)}`;
    const response = await fetch(apiUrl);

    if (response.ok) {
      const suggestions = await response.json();

      // Display the suggestions in a dropdown or list
      displaySuggestions(suggestions, cardCount);
    }
  });
  // ...

// Add an event listener to the "Add Card" button
const addCardButton = document.getElementById("addCardButton");

addCardButton.addEventListener("click", async () => {
    const dropdown = document.querySelector("select"); // Assuming there's only one dropdown on the page
    const selectedOption = dropdown.options[dropdown.selectedIndex].value;

    // Check if the selected item is not empty
    if (selectedOption.trim() !== '') {
        cardCount++; // Increment the card count
        createCardInputFields(cardCount, selectedOption, 1, "", ""); // Assuming quantity is set to 1
    }
    
    try {
        // Fetch card details (type and cost) based on the selected item
        const cardDetails = await getCardDetails(selectedOption);

        // Update the input fields with the fetched data
        console.log("cardCount",cardCount);
        console.log(cardDetails);
        console.log(`input[name='cardType${cardCount}']`);
        document.querySelector(`input[name='cardType${cardCount}']`).value = cardDetails.cardType;
        document.querySelector(`input[name='cardCost${cardCount}']`).value = cardDetails.cardCost;
        document.querySelector(`input[name='cardRulesText${cardCount}']`).value = cardDetails.rulesText;
    } catch (error) {
        // Handle any errors that occur during the fetch or processing
        console.error("Error fetching card details: " + error.message);
    }
});

});
</script>
<link rel="stylesheet" href="/assets/decks.css">
</head>
<div id="header">
    <%- include('partials/nav'); -%>
</div>
<body>
  <form method="POST" action="/create-deck">
    <!-- Deck Name Input -->
    <label for="deckName">Deck Name:</label>
    <input type="text" name="deckName" required>
  
    <!-- Upload XML File Input -->
    <label for="xmlFile">Upload XML File:</label>
    <input type="file" name="xmlFile" accept=".xml" id="xmlFile">
  
    <!-- Container for Card Information Inputs -->
    <div id="cardInputsContainer">
      <!-- Card Information Inputs for the First Card -->
    </div>
  
    <!-- "Add Card" Button -->
    <button type="button" id="addCardButton">Add Card</button>
  
    <!-- "Create Deck" Button -->
    <button type="submit">Create Deck</button>
    <!-- "Save Deck" Button -->
    <button type="button" id="saveDeckButton">Save Deck</button>
  </form>
  <input type="text" name="lookupCardName" id="lookupCardName" placeholder="Enter Card Name">
  <input type="text" name="cardNameInput" id="cardNameInput" placeholder="Selected Card">
  <div id="suggestionsContainer">
    <h3>Card Suggestions</h3>
    <!-- Suggestions will be displayed here -->
  </div>
</body>
</html>